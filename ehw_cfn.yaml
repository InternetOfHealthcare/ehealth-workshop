Description: "E-Health Workshop Stack"
Parameters:
  NotebookInstanceType:
    Type: String
    Default: "t2.micro"
  NotebookInstanceImage:
    Type: AWS::EC2::Image::Id
    Default: "ami-cb9ec1b1"

Resources:
  LambdaExecutionRoleForEC2KeyPairCreator:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - ec2:CreateKeyPair
              - ec2:DeleteKeyPair
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:DeleteBucket
            Resource: "*"
  EC2KeyPairCreator:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Sub |
          from __future__ import print_function
          import json
          import urllib2
          import cfnresponse
          import boto3
          from time import sleep

          def lambda_handler(event, context):
            print(event)
            bucketname = str("${AWS::StackName}") + '-' + str("${AWS::AccountId}") 
            keypairname = bucketname
            objectname = bucketname + ".pem"
            if event['RequestType'] == "Create":
              kp = boto3.client('ec2').create_key_pair(KeyName=keypairname)
              s3client = boto3.client('s3')
              s3client.create_bucket(Bucket=bucketname)
              s3put = s3client.put_object(Bucket=bucketname,Key=objectname,Body=str(kp['KeyMaterial']),ServerSideEncryption="AES256")
              sleep(2)
              keypairurl = str(s3client.generate_presigned_url('get_object', Params = {'Bucket': bucketname, 'Key': objectname}, ExpiresIn = 36000))   
              responseData = {}
              responseData['keypairname'] = keypairname
              responseData['keypairurl'] = keypairurl
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "EC2KeyPairCreator")
            if event['RequestType'] == "Delete":
              print("Deleting resources...")
              boto3.client('ec2').delete_key_pair(KeyName=keypairname)
              s3client = boto3.client('s3')
              s3delete = s3client.delete_object(Bucket=bucketname,Key=objectname)
              sleep(2)
              s3client.delete_bucket(Bucket=bucketname)
              responseData = {}
              responseData['keypairname'] = "Deleted: True"
              responseData['keypairurl'] = "Deleted: True"
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "EC2KeyPairCreator")
            if event['RequestType'] == "Change":
              print("Nothing is done with this resource upon stack change...")
              responseData = {}
              responseData['keypairname'] = "Untouched: True"
              responseData['keypairurl'] = "Untouched: True"
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "EC2KeyPairCreator")
      Description: Lambda function that will create an EC2 KeyPair.
      FunctionName: !Ref AWS::StackName 
      Handler: index.lambda_handler
      Role : !GetAtt LambdaExecutionRoleForEC2KeyPairCreator.Arn
      Runtime: python2.7
      Timeout: 20
  CreateKeyPair:
    Type: Custom::EC2KeyPairCreatorDirectInvocation
    Properties:
      ServiceToken: !GetAtt EC2KeyPairCreator.Arn
  NotebookRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - 
          "arn:aws:iam::aws:policy/AdministratorAccess"
  NotebookInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - 
          !Ref "NotebookRole"
  NotebookInstance:
    Type: "AWS::EC2::Instance"
#    CreationPolicy:
#      ResourceSignal:
#        Timeout: PT10M
    DependsOn: CreateKeyPair
    Properties:
      KeyName: 
        Fn::Join:
          - '-'
          - - !Ref 'AWS::StackName'
            - !Ref 'AWS::AccountId'
      InstanceType: !Ref NotebookInstanceType
      ImageId: !Ref NotebookInstanceImage
      IamInstanceProfile: !Ref NotebookInstanceProfile 
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            -
              - "#!/bin/bash -ex"
              - "\n"
              - "yum install -y git aws-cfn-bootstrap \n"
              - "cd /usr/src \n"
              - "git clone https://github.com/InternetOfHealthcare/ehealth-workshop.git \n"
              - "cd ehealth-workshop \n"
              - "source ./ehw_notebook_userdata.sh \n"
              - "\n"
              - "/opt/aws/bin/cfn-signal -e 0 "
              - " --stack "
              - !Ref AWS::StackName
              - " --resource NotebookInstance "
              - " --region "
              - !Ref AWS::Region
              - "\n"

  # We're allowing any ip address to access port 22 and 3000
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow HTTPD on 80 and Jupyter on port 8888"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"      
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"      
        - IpProtocol: "tcp"
          FromPort: "8080"
          ToPort: "8080"
          CidrIp: "0.0.0.0/0"

Outputs:
  NotebookURL:
    Description: "Notebook Instance URL"
    Value:
      Fn::Join:
        - ""
        -
          - "http://"
          - Fn::GetAtt:
              - "NotebookInstance"
              - "PublicIp"
          - "/notebooks/index.ipynb"
  NotebookPassword:
    Description: "Notebook Password"
    Value: "badwolf"
  EC2KeyPairURL: 
    Value: 
      Fn::GetAtt: 
        - CreateKeyPair
        - keypairurl
  EC2KeyPairName: 
    Value: 
      Fn::GetAtt: 
        - CreateKeyPair
        - keypairname